
package org.drip.execution.optimum;

/*
 * -*- mode: java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 */

/*!
 * Copyright (C) 2022 Lakshmi Krishnamurthy
 * Copyright (C) 2021 Lakshmi Krishnamurthy
 * Copyright (C) 2020 Lakshmi Krishnamurthy
 * Copyright (C) 2019 Lakshmi Krishnamurthy
 * Copyright (C) 2018 Lakshmi Krishnamurthy
 * Copyright (C) 2017 Lakshmi Krishnamurthy
 * Copyright (C) 2016 Lakshmi Krishnamurthy
 * 
 *  This file is part of DROP, an open-source library targeting analytics/risk, transaction cost analytics,
 *  	asset liability management analytics, capital, exposure, and margin analytics, valuation adjustment
 *  	analytics, and portfolio construction analytics within and across fixed income, credit, commodity,
 *  	equity, FX, and structured products. It also includes auxiliary libraries for algorithm support,
 *  	numerical analysis, numerical optimization, spline builder, model validation, statistical learning,
 *  	graph builder/navigator, and computational support.
 *  
 *  	https://lakshmidrip.github.io/DROP/
 *  
 *  DROP is composed of three modules:
 *  
 *  - DROP Product Core - https://lakshmidrip.github.io/DROP-Product-Core/
 *  - DROP Portfolio Core - https://lakshmidrip.github.io/DROP-Portfolio-Core/
 *  - DROP Computational Core - https://lakshmidrip.github.io/DROP-Computational-Core/
 * 
 * 	DROP Product Core implements libraries for the following:
 * 	- Fixed Income Analytics
 * 	- Loan Analytics
 * 	- Transaction Cost Analytics
 * 
 * 	DROP Portfolio Core implements libraries for the following:
 * 	- Asset Allocation Analytics
 *  - Asset Liability Management Analytics
 * 	- Capital Estimation Analytics
 * 	- Exposure Analytics
 * 	- Margin Analytics
 * 	- XVA Analytics
 * 
 * 	DROP Computational Core implements libraries for the following:
 * 	- Algorithm Support
 * 	- Computation Support
 * 	- Function Analysis
 *  - Graph Algorithm
 *  - Model Validation
 * 	- Numerical Analysis
 * 	- Numerical Optimizer
 * 	- Spline Builder
 *  - Statistical Learning
 * 
 * 	Documentation for DROP is Spread Over:
 * 
 * 	- Main                     => https://lakshmidrip.github.io/DROP/
 * 	- Wiki                     => https://github.com/lakshmiDRIP/DROP/wiki
 * 	- GitHub                   => https://github.com/lakshmiDRIP/DROP
 * 	- Repo Layout Taxonomy     => https://github.com/lakshmiDRIP/DROP/blob/master/Taxonomy.md
 * 	- Javadoc                  => https://lakshmidrip.github.io/DROP/Javadoc/index.html
 * 	- Technical Specifications => https://github.com/lakshmiDRIP/DROP/tree/master/Docs/Internal
 * 	- Release Versions         => https://lakshmidrip.github.io/DROP/version.html
 * 	- Community Credits        => https://lakshmidrip.github.io/DROP/credits.html
 * 	- Issues Catalog           => https://github.com/lakshmiDRIP/DROP/issues
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *   	you may not use this file except in compliance with the License.
 *   
 *  You may obtain a copy of the License at
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  	distributed under the License is distributed on an "AS IS" BASIS,
 *  	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  
 *  See the License for the specific language governing permissions and
 *  	limitations under the License.
 */

/**
 * <i>AlmgrenChrissDriftDiscrete</i> contains the Trading Trajectory generated by the Almgren and Chriss
 * (2000) Scheme under the Criterion of Non-zero Drift. The References are:
 * 
 * <br><br>
 * 	<ul>
 * 		<li>
 * 			Almgren, R., and N. Chriss (1999): Value under Liquidation <i>Risk</i> <b>12 (12)</b>
 * 		</li>
 * 		<li>
 * 			Almgren, R., and N. Chriss (2000): Optimal Execution of Portfolio Transactions <i>Journal of
 * 				Risk</i> <b>3 (2)</b> 5-39
 * 		</li>
 * 		<li>
 * 			Bertsimas, D., and A. W. Lo (1998): Optimal Control of Execution Costs <i>Journal of Financial
 * 				Markets</i> <b>1</b> 1-50
 * 		</li>
 * 		<li>
 * 			Chan, L. K. C., and J. Lakonishak (1995): The Behavior of Stock Prices around Institutional
 * 				Trades <i>Journal of Finance</i> <b>50</b> 1147-1174
 * 		</li>
 * 		<li>
 * 			Keim, D. B., and A. Madhavan (1997): Transaction Costs and Investment Style: An Inter-exchange
 * 				Analysis of Institutional Equity Trades <i>Journal of Financial Economics</i> <b>46</b>
 * 				265-292
 * 		</li>
 * 	</ul>
 *
 *	<br><br>
 *  <ul>
 *		<li><b>Module </b> = <a href = "https://github.com/lakshmiDRIP/DROP/tree/master/ProductCore.md">Product Core Module</a></li>
 *		<li><b>Library</b> = <a href = "https://github.com/lakshmiDRIP/DROP/tree/master/TransactionCostAnalyticsLibrary.md">Transaction Cost Analytics</a></li>
 *		<li><b>Project</b> = <a href = "https://github.com/lakshmiDRIP/DROP/tree/master/src/main/java/org/drip/execution/README.md">Optimal Impact/Capture Based Trading Trajectories - Deterministic, Stochastic, Static, and Dynamic</a></li>
 *		<li><b>Package</b> = <a href = "https://github.com/lakshmiDRIP/DROP/tree/master/src/main/java/org/drip/execution/optimum/README.md">Almgren-Chriss Efficient Trading Trajectories</a></li>
 *  </ul>
 * 
 * @author Lakshmi Krishnamurthy
 */

public class AlmgrenChrissDriftDiscrete extends org.drip.execution.optimum.AlmgrenChrissDiscrete {
	private double[] _adblHoldingsDriftAdjustment = null;
	private double[] _adblTradeListDriftAdjustment = null;
	private double _dblResidualHolding = java.lang.Double.NaN;
	private double _dblDriftGainUpperBound = java.lang.Double.NaN;

	/**
	 * AlmgrenChrissDriftDiscrete Constructor
	 * 
	 * @param adblExecutionTimeNode Array containing the Trajectory Time Nodes
	 * @param adblHoldings Array containing the Holdings
	 * @param adblTradeList Array containing the Trade List
	 * @param adblHoldingsDriftAdjustment Array containing the Holdings Drift Adjustment
	 * @param adblTradeListDriftAdjustment Array containing the Trade List Drift Adjustment
	 * @param dblKappaTilda AC2000 Kappa-Tilda
	 * @param dblKappa AC2000 Kappa
	 * @param dblResidualHolding The Residual Holdings induced by the Drift
	 * @param dblDriftGainUpperBound The Upper Bound of the Gain induced by Drift
	 * @param dblTransactionCostExpectation The Expected Transaction Cost
	 * @param dblTransactionCostVariance The Variance of the Transaction Cost
	 * @param dblMarketPower Estimate of the Relative Market Impact Power
	 * 
	 * @throws java.lang.Exception Thrown if the Inputs are Invalid
	 */

	public AlmgrenChrissDriftDiscrete (
		final double[] adblExecutionTimeNode,
		final double[] adblHoldings,
		final double[] adblTradeList,
		final double[] adblHoldingsDriftAdjustment,
		final double[] adblTradeListDriftAdjustment,
		final double dblKappaTilda,
		final double dblKappa,
		final double dblResidualHolding,
		final double dblDriftGainUpperBound,
		final double dblTransactionCostExpectation,
		final double dblTransactionCostVariance,
		final double dblMarketPower)
		throws java.lang.Exception
	{
		super (adblExecutionTimeNode, adblHoldings, adblTradeList, dblKappaTilda, dblKappa,
			dblTransactionCostExpectation, dblTransactionCostVariance, dblMarketPower);

		if (null == (_adblHoldingsDriftAdjustment = adblHoldingsDriftAdjustment) || null ==
			(_adblTradeListDriftAdjustment = adblTradeListDriftAdjustment) ||
				!org.drip.numerical.common.NumberUtil.IsValid (_dblResidualHolding = dblResidualHolding) ||
					!org.drip.numerical.common.NumberUtil.IsValid (_dblDriftGainUpperBound =
						dblDriftGainUpperBound))
			throw new java.lang.Exception ("AlmgrenChrissDriftDiscrete Constructor => Invalid Inputs");

		int iNumNode = _adblHoldingsDriftAdjustment.length;

		if (0 == iNumNode || iNumNode != _adblTradeListDriftAdjustment.length + 1)
			throw new java.lang.Exception ("AlmgrenChrissDriftDiscrete Constructor => Invalid Inputs");

		for (int i = 0; i < iNumNode; ++i) {
			if (!org.drip.numerical.common.NumberUtil.IsValid (_adblHoldingsDriftAdjustment[i]))
				throw new java.lang.Exception ("AlmgrenChrissDriftDiscrete Constructor => Invalid Inputs");

			if (0 != i) {
				if (!org.drip.numerical.common.NumberUtil.IsValid (_adblTradeListDriftAdjustment[i - 1]))
					throw new java.lang.Exception
						("AlmgrenChrissDriftDiscrete Constructor => Invalid Inputs");
			}
		}
	}

	/**
	 * Retrieve the Array of the Holdings Drift Adjustment
	 * 
	 * @return The Array of the Holdings Drift Adjustment
	 */

	public double[] holdingsDriftAdjustment()
	{
		return _adblHoldingsDriftAdjustment;
	}

	/**
	 * Retrieve the Array of the Trade List Drift Adjustment
	 * 
	 * @return The Array of the Trade List Drift Adjustment
	 */

	public double[] tradeListDriftAdjustment()
	{
		return _adblTradeListDriftAdjustment;
	}

	/**
	 * Retrieve the Residual Holdings induced by the Drift
	 * 
	 * @return The Residual Holdings induced by the Drift
	 */

	public double residualHolding()
	{
		return _dblResidualHolding;
	}

	/**
	 * Retrieve the Gain Upper Bound induced by the Drift
	 * 
	 * @return The Gain Upper Bound induced by the Drift
	 */

	public double driftGainUpperBound()
	{
		return _dblDriftGainUpperBound;
	}
}
